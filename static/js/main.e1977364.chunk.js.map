{"version":3,"sources":["js/components/AcceptableIncreasePlot/lines.js","js/hooks/useD3.js","js/components/AcceptableIncreasePlot/index.styled.jsx","js/components/AcceptableIncreasePlot/index.jsx","js/components/AcceptableIncreasePlot/legend.js","js/components/Main/index.jsx","reportWebVitals.js","index.js"],"names":["_svg","_pastData","_futureData","_xScale","_yScale","useD3","renderChartFn","dependencies","ref","useRef","useEffect","d3","current","PlotHeader","styled","h2","PlotContainer","div","SvgContainer","SvgContent","svg","mapRaw","row","x","t","y1","y","y2","x1","Date","parseFloat","mapRawFuture","tf","zf","xf","AcceptableIncreasePlot","useState","pastData","setPastData","futureData","setFutureData","getPastData","a","values","getFutureData","allData","concat","selectAll","remove","height","width","margin","top","right","bottom","left","xScale","domain","map","range","allY","filter","minY","Math","floor","min","maxY","ceil","max","yScale","xAxis","ticks","tickSizeOuter","yAxis","attr","append","call","g","select","clone","initializeLines","data","enter","line","curve","datum","addPastIncrease","area","y0","style","addPastArea","addForecast","addForecastIncrease","addForecastArea","d","i","text","createLegend","MainContainer","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1977364.chunk.js","sourcesContent":["import * as d3 from \"d3\";\r\n\r\nlet _svg, _pastData, _futureData, _xScale, _yScale;\r\n\r\n\r\nconst initialize = ({ svg, pastData, futureData, xScale, yScale }) => {\r\n  _svg = svg;\r\n  _pastData = pastData;\r\n  _futureData = futureData;\r\n  _xScale = xScale;\r\n  _yScale = yScale;\r\n}\r\n\r\nconst addPastMonthly = () => {\r\n  // Add past monthly points\r\n  _svg\r\n    .selectAll(\".point\")\r\n    .data(_pastData)\r\n    .enter()\r\n    .append(\"svg:circle\")\r\n    .attr(\"stroke\", \"black\")\r\n    .attr(\"fill\", \"black\")\r\n    .attr(\"cx\", ({ x1 }) => _xScale(x1))\r\n    .attr(\"cy\", ({ y1 }) => _yScale(y1))\r\n    .attr(\"r\", 2);\r\n}\r\n\r\nconst addPastIncrease = () => {\r\n  const line = d3\r\n    .line()\r\n    .curve(d3.curveLinear)\r\n    .x(({ x1 }) => _xScale(x1))\r\n    .y(({ y2 }) => _yScale(y2));\r\n  _svg\r\n    .append(\"path\")\r\n    .datum(_pastData)\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"#4646ff\")\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"stroke-linecap\", \"round\")\r\n    .attr(\"stroke-linejoin\", \"round\")\r\n    .attr(\"stroke-opacity\", 1)\r\n    .attr(\"d\", line);\r\n}\r\n\r\nconst addPastArea = () => {\r\n    // fill area between lines\r\n    const area = d3\r\n    .area()\r\n    .x(({ x1 }) => _xScale(x1))\r\n    .y0(({ y1 }) => _yScale(y1))\r\n    .y1(({ y2 }) => _yScale(y2));\r\n  _svg\r\n    .append(\"path\")\r\n    .datum(_pastData)\r\n    .attr(\"class\", \"area\")\r\n    .attr(\"d\", area)\r\n    .style(\"fill\", \"#4646ff\")\r\n    .style(\"opacity\", 0.4);\r\n}\r\n\r\nconst addForecast = () => {\r\n  const line = d3\r\n    .line()\r\n    .curve(d3.curveLinear)\r\n    .x(({ x1 }) => _xScale(x1))\r\n    .y(({ y1 }) => _yScale(y1));\r\n\r\n  _svg\r\n    .append(\"path\")\r\n    .datum(_futureData.filter(({ y1 }) => y1))\r\n    .attr(\"fill\", \"none\")\r\n    .style(\"stroke-dasharray\", \"7, 7\")\r\n    .attr(\"stroke\", \"#444\")\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"stroke-linecap\", \"round\")\r\n    .attr(\"stroke-linejoin\", \"round\")\r\n    .attr(\"stroke-opacity\", 1)\r\n    .attr(\"d\", line);\r\n}\r\n\r\nconst addForecastIncrease = () => {\r\n  const line = d3\r\n    .line()\r\n    .curve(d3.curveLinear)\r\n    .x(({ x1 }) => _xScale(x1))\r\n    .y(({ y2 }) => _yScale(y2));\r\n\r\n  _svg\r\n    .append(\"path\")\r\n    .datum(_futureData.filter(({ y2 }) => y2)) // filter for actual values\r\n    .attr(\"fill\", \"none\")\r\n    .attr(\"stroke\", \"#05fefe\")\r\n    .attr(\"stroke-width\", 1)\r\n    .attr(\"stroke-linecap\", \"round\")\r\n    .attr(\"stroke-linejoin\", \"round\")\r\n    .attr(\"stroke-opacity\", 1)\r\n    .attr(\"d\", line);\r\n}\r\n\r\nconst addForecastArea = () => {\r\n  const area = d3\r\n    .area()\r\n    .x(({ x1 }) => _xScale(x1))\r\n    .y0(({ y1 }) => _yScale(y1))\r\n    .y1(({ y2 }) => _yScale(y2));\r\n  _svg\r\n    .append(\"path\")\r\n    .datum(_futureData.filter(({ y1, y2 }) => y1 && y2))\r\n    .attr(\"class\", \"area\")\r\n    .attr(\"d\", area)\r\n    .style(\"fill\", \"#05fefe\")\r\n    .style(\"opacity\", 0.3);\r\n}\r\n\r\nexport { initialize as initializeLines, addPastMonthly, addPastIncrease, addPastArea, addForecast, addForecastIncrease, addForecastArea }","import { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nconst useD3 = (renderChartFn, dependencies) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n  return ref;\n};\n\nexport default useD3;\n","import styled from 'styled-components';\r\n\r\nconst PlotHeader = styled.h2`\r\n  text-align: center;\r\n`\r\n\r\n\r\nconst PlotContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n`;\r\n\r\nconst SvgContainer = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  width: 100%;\r\n  padding-bottom: 100%;\r\n  vertical-align: top;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst SvgContent = styled.svg`\r\n  display: inline-block;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n`;\r\n\r\nexport { PlotHeader, PlotContainer, SvgContainer, SvgContent };\r\n","import useD3 from \"js/hooks/useD3\";\nimport { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { initializeLines, addPastMonthly, addPastIncrease, addPastArea, addForecast, addForecastIncrease, addForecastArea } from \"./lines\";\nimport { createLegend } from \"./legend\";\nimport { PlotHeader, PlotContainer, SvgContainer, SvgContent } from \"./index.styled\";\n\n// convert to date and floats\nconst mapRaw = (row) => {\n  const { t: x, y: y1, x: y2 } = row;\n  return { x1: new Date(x), y1: parseFloat(y1), y2: parseFloat(y2) };\n};\n\nconst mapRawFuture = (row) => {\n  const { tf: t, zf: y, xf: x } = row;\n  return mapRaw({ t, y, x });\n};\n\n/**\n * Create the acceptable increase plot\n * @returns {Node} svg\n */\nconst AcceptableIncreasePlot = () => {\n  const [pastData, setPastData] = useState();\n  const [futureData, setFutureData] = useState();\n\n  useEffect(() => {\n    const getPastData = async () => {\n      const values = await d3.csv(\"/Past.csv\", mapRaw);\n      setPastData(values);\n    };\n    getPastData();\n  }, []);\n\n  useEffect(() => {\n    const getFutureData = async () => {\n      const values = await d3.csv(\"/Future.csv\", mapRawFuture);\n      setFutureData(values);\n    };\n    getFutureData();\n  }, []);\n\n  const ref = useD3(\n    (svg) => {\n      if (pastData && futureData) {\n        const allData = pastData.concat(futureData);\n        svg.selectAll(\"*\").remove();\n\n        const height = 500;\n        const width = 700;\n        const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n        const xScale = d3\n          .scaleTime()\n          .domain(d3.extent(allData.map(({ x1 }) => x1)))\n          .range([margin.left, width - margin.right]);\n\n        // create a flat list of all y values, and filter out any undefined\n        const allY = allData\n          .filter(({ y1 }) => y1)\n          .map(({ y1 }) => y1)\n          .concat(allData.filter(({ y2 }) => y2).map(({ y2 }) => y2));\n        // get Y range\n        const minY = Math.floor(Math.min(...allY));\n        const maxY = Math.ceil(Math.max(...allY));\n\n        const yScale = d3.scaleLinear(\n          [minY, maxY],\n          [height - margin.bottom, margin.top]\n        );\n        const xAxis = d3\n          .axisBottom(xScale)\n          .ticks(width / 50)\n          .tickSizeOuter(0);\n        const yAxis = d3.axisLeft(yScale).ticks(height / 50);\n\n        svg\n          .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n          .attr(\"viewBox\", `0 0 ${width} ${height}`)\n\n        svg\n          .append(\"g\")\n          .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n          .call(xAxis);\n\n        svg\n          .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left},0)`)\n          .call(yAxis)\n          .call((g) => g.select(\".domain\").remove())\n          .call((g) =>\n            g\n              .selectAll(\".tick line\")\n              .clone()\n              .attr(\"x2\", width - margin.left - margin.right)\n              .attr(\"stroke-opacity\", 0.1)\n          )\n          .call((g) =>\n            g\n              .append(\"text\")\n              .attr(\"x\", -margin.left)\n              .attr(\"y\", 10)\n              .attr(\"fill\", \"currentColor\")\n              .attr(\"text-anchor\", \"start\")\n          );\n\n        initializeLines({\n          svg, pastData, futureData, xScale, yScale\n        })\n        addPastMonthly();\n        addPastIncrease();\n        addPastArea();\n        addForecast();\n        addForecastIncrease();\n        addForecastArea();\n\n        createLegend({ svg, height, width });\n      }\n    },\n    [pastData, futureData]\n  );\n\n  return (\n    <>\n      <PlotHeader>Sample Plot using ReactJS and d3.js</PlotHeader>\n      <PlotContainer>\n        <SvgContainer>\n          <SvgContent\n            ref={ref}\n          />\n        </SvgContainer>\n      </PlotContainer>\n    </>\n  );\n};\n\nexport default AcceptableIncreasePlot;\n","const createLegend = ({ svg, height, width }) => {\r\n  svg.append(\"rect\")\r\n  .attr(\"class\", \"legend\")\r\n  .attr(\"x\", width-260)\r\n  .attr(\"y\", height-150)\r\n  .attr(\"rx\", \"5px\")\r\n  .attr(\"width\", 230)\r\n  .attr(\"height\", 90)\r\n  .attr(\"stroke\", \"darkgray\")\r\n  .attr(\"fill\", \"white\");\r\n\r\n  const legend_text = svg.selectAll(\"legend_text\")\r\n    .data([\"Monthly Data\", \"Forecast\", \"Acceptable Increase\", \"Forecasted Acceptable\"])\r\n    .enter();\r\n    \r\n  legend_text.append(\"text\")\r\n    .attr(\"x\", width-200)\r\n    .attr(\"y\", (d, i) => height-130+i*20)\r\n    .text((d) => d)\r\n\r\n  // less hardcoding - match shape/fill with those of the line being drawn\r\n  svg\r\n    .append(\"circle\")\r\n    .attr(\"cx\",width-228)\r\n    .attr(\"cy\",height-136)\r\n    .attr(\"r\", 2)\r\n    .style(\"fill\", \"#black\")\r\n  svg\r\n    .append(\"line\")\r\n    .attr(\"x1\", width - 240)\r\n    .attr(\"x2\", width - 210)\r\n    .attr(\"y1\", height - 116)\r\n    .attr(\"y2\", height - 116)\r\n    .style(\"stroke-dasharray\",\"5,5\")\r\n    .style(\"stroke\", \"black\");\r\n  svg\r\n    .append('rect')\r\n    .attr('x', width-242)\r\n    .attr('y', height-102)\r\n    .attr('width', 30)\r\n    .attr('height', 13)\r\n    .attr(\"fill\", \"#4646ff\")\r\n    .attr(\"opacity\", 0.4);\r\n  svg\r\n    .append('rect')\r\n    .attr('x', width-242)\r\n    .attr('y', height-82)\r\n    .attr('width', 30)\r\n    .attr('height', 13)\r\n    .attr(\"fill\", \"#05fefe\")\r\n    .attr(\"opacity\", 0.3);\r\n}\r\n\r\nexport { createLegend };\r\n","import AcceptableIncreasePlot from \"js/components/AcceptableIncreasePlot\";\nimport styled from 'styled-components';\n\nconst MainContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst Main = () => {\n  return (\n    <MainContainer>\n      <AcceptableIncreasePlot />\n    </MainContainer>\n  );\n};\n\nexport default Main;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"js/components/Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}